name: Publish

on:
  push:
    branches:
      - main
      - beta
    paths:
      - 'app/**'
      - '.github/workflows/publish.yml'

jobs:
  publish:
    # Skip running release workflow on main if the commit is a release commit from beta
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}

    permissions:
      id-token: write
      deployments: write
      contents: write

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: app/package-lock.json

      - name: Install and build
        working-directory: app
        run: |
          npm install
          npm run postinstall
          npm run build

      - name: Get next version
        working-directory: app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Publish releases
        working-directory: app
        env:
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "VERSION: ${{ env.VERSION }}"
          npm exec electron-builder -- --publish always -mwl -c.extraMetadata.version=$VERSION

      - name: Publish Draft Release
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit v${{ env.VERSION }} --draft=false
